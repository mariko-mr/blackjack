@startuml blackjack

BlackjackGame -> Participant
BlackjackGame --> Deck
BlackjackGame --> Message
BlackjackGame --> Validator
BlackjackGame --> HandJudger

Participant <|-- HumPlayer
Participant <|-- CpuPlayer
Participant <|-- Dealer

HumPlayer ---> Deck
CpuPlayer ---> Deck
Dealer ---> Deck

Deck *-- Card

Validator --> Message

HumPlayer ---> AceRule
HumPlayer ---> HumPlayerRule

CpuPlayer ---> AceRule
CpuPlayer ---> CpuPlayerRule

Dealer ---> AceRule
Dealer ---> DealerRule

NonHumPlayerRule <|-- CpuPlayerRule
NonHumPlayerRule <|-- DealerRule

ParticipantRule <|-- HumPlayerRule
ParticipantRule <|-- CpuPlayerRule
ParticipantRule <|-- DealerRule


skinparam classAttributeIconSize 0
skinparam groupInheritance 3

' ブラックジャックゲーム
class BlackjackGame {
    -const DRAW_TWO
    -const DRAW_ONE
    -array $cpuPlayers
    +__construct()
    +playGame(): void
    -setupGame(): void
    -startGame(): void
    -playerTurn(): string
    -cpuTurn(): void
    -dealerTurn(): void
    -showDown(): void
    -quitGame(): void
}

' 参加者
abstract Participant {
    +__construct()
    +drawCards(): void
    +getCards(): array
    +getTotalScore(): int
    +isBust(): bool
    #updateTotalScore(): int
}

class HumPlayer {
    -array $playerCards
    -int $playerTotalScore
    +__construct()
    +drawCards(): void
    +getCards(): array
    +getTotalScore(): int
    +isBust(): bool
    #updateTotalScore(): int
}

class Dealer {
    -array $playerCards
    -int $playerTotalScore
    +__construct()
    +drawCards(): void
    +getCards(): array
    +getTotalScore(): int
    +isBust(): bool
    #updateTotalScore(): int
}

class CpuPlayer {
    -array $playerCards
    -int $playerTotalScore
    +__construct()
    +drawCards(): void
    +getCards(): array
    +getTotalScore(): int
    +isBust(): bool
    #updateTotalScore(): int
}

' デッキ
class Deck {
    -const SUITS
    -const CARD_NUM_AND_SCORES
    -array $cards
    +__construct()
    +drawCards(): array
}

' カード
class Card {
    +__construct()
    +getSuit(): string
    +getNumber(): string
    +getScore(): int
}

' ルールクラス
interface ParticipantRule{
    +const TOTAL_SCORE_21
    +isBust(): bool
}

interface NonHumPlayerRule{
    +const TOTAL_SCORE_17
    +shouldDrawCard(): bool
}

class HumPlayerRule {
    +isBust(): bool
}

class DealerRule {
    +isBust(): bool
    +shouldDrawCard(): bool
}

class CpuPlayerRule {
    +isBust(): bool
    +shouldDrawCard(): bool
}

class AceRule{
    +subtractAceScore(): int
    -countAce(): int
}

' 結果
class HandJudger {
    +determineWinner(): array
    -isTie(): bool
    -isHigherScore(): bool
}

' メッセージ
class Message {
    +showSetupMsg(): void
    +showStartMsg(): void
    +showPlayerTurnMsg(): void
    +showCpuDrawnMsg(): void
    +showDealerTurnMsg(): void
    +showDealerDrawnMsg(): void
    +showTotalScoreMsg(): void
    +showJudgmentMsg(): void
    +showExitMsg(): void
    +showValidateYesNoErrorMsg(): void
    +showValidateNumberErrorMsg(): void
}

' バリデーター
class Validator {
    +validateYesNoAnswer(): string
    +validateNumberAnswer(): string
}

@enduml
